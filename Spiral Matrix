Problem:

Given an m x n matrix, return all elements of the matrix in spiral order.

Input:

1 2 3 
4 5 6
7 8 9 

Output:

[1 2 3 6 9 8 7 4 5]

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 10
-100 <= matrix[i][j] <= 100

Solution:

class Solution {
    public List<Integer> spiralOrder(int[][] matrix) {
        List<Integer> output = new ArrayList<Integer>();

        if(matrix.length == 0 && matrix[0].length == 0){
            return output;
        }

        int rowLower = 0;
        int rowUpper = matrix.length - 1;
        int colLower = 0;
        int colUpper = matrix[0].length-1;

        while(rowLower <= rowUpper && colLower <= colUpper){

            for(int i=colLower ; i <= colUpper;i++){
                output.add(matrix[rowLower][i]);
            }
            rowLower++;

            for(int i=rowLower; i <= rowUpper; i++){
                output.add(matrix[i][colUpper]);
            }
            colUpper--;

            if(rowLower > rowUpper || colLower > colUpper){
                break;
            }

            for(int i=colUpper ;i >= colLower ;i--){
                output.add(matrix[rowUpper][i]);
            }
            rowUpper--;

            for(int i=rowUpper ; i >= rowLower ;i--){
                output.add(matrix[i][colLower]);
            }
            colLower++;
        }
        return output;
    }
}
