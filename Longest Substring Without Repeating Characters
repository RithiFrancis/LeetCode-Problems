Problem:

Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.


Solution:

class Solution {
    public int lengthOfLongestSubstring(String s) {
        int length = s.length();
        Set<Character> unique_set = new HashSet<>();
        int checker = 0;
        int max_length = 0;
        for(int iterator = 0 ; iterator < length ; iterator++){
            if(!(unique_set.contains(s.charAt(iterator)))){
                unique_set.add(s.charAt(iterator));
                max_length = Math.max(max_length , iterator - checker + 1); 
            }
            else{
                while(unique_set.contains(s.charAt(iterator))){
                    unique_set.remove(s.charAt(checker));
                    checker++;
                }
                unique_set.add(s.charAt(iterator));
            }
        }
        return max_length;
    }
}
